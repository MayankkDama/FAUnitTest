name: Build and Deploy

on:
  pull_request:
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [17]

    env:
      GPR_USER: ${{ secrets.GPR_USER }}
      GPR_KEY: ${{ secrets.GPR_KEY }}

    outputs:
      version_tag: ${{ steps.version.outputs.version_tag }}
      is_release: ${{ steps.version.outputs.is_release }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version tag
        id: version
        run: |
          VERSION_TAG=$(git tag --points-at HEAD | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          
          if [ -n "$VERSION_TAG" ]; then
            echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "version_tag=dev-build" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      - name: Generate signing files
        run: |
          mkdir -p .signing
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > .signing/fa_release_keystore.jks
          echo "${{ secrets.GRADLE_RELEASE_PROPERTIES_BASE64 }}" | base64 --decode > .signing/release.properties

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Rename APK
        run: |
          cp ./app/build/outputs/apk/release/app-release.apk \
             ./app/build/outputs/apk/release/app-${{ steps.version.outputs.version_tag }}.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ steps.version.outputs.version_tag }}
          path: ./app/build/outputs/apk/release/app-${{ steps.version.outputs.version_tag }}.apk
          retention-days: 30

  deploy-firebase:
    needs: build
    if: |
      needs.build.outputs.is_release == 'true' &&
      contains(github.event.pull_request.labels.*.name, 'deploy:firebase')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.version_tag }}

      - name: Deploy to Firebase (Dummy)
        run: |
          echo "ðŸš€ [DUMMY] Deploying to Firebase App Distribution..."
          echo "APK: ./app-${{ needs.build.outputs.version_tag }}.apk"
          echo "Version: ${{ needs.build.outputs.version_tag }}"
          echo "âœ… [DUMMY] Firebase deployment completed successfully!"
          
          # Uncomment below when ready for actual deployment:
          # npm install -g firebase-tools
          # firebase appdistribution:distribute ./app-${{ needs.build.outputs.version_tag }}.apk \
          #   --app ${{ secrets.APP_ID }} \
          #   --release-notes "Release ${{ needs.build.outputs.version_tag }}" \
          #   --testers-file ./config/firebase/app_distribution_testers.txt \
          #   --token ${{ secrets.FIREBASE_APP_DISTRIBUTION_TOKEN }}

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ **[TEST]** Version **${{ needs.build.outputs.version_tag }}** - Firebase deployment step executed successfully!'
            })

  deploy-playstore:
    needs: build
    if: |
      needs.build.outputs.is_release == 'true' &&
      contains(github.event.pull_request.labels.*.name, 'deploy:playstore')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: app-${{ needs.build.outputs.version_tag }}

      - name: Deploy to Play Store (Dummy)
        run: |
          echo "ðŸŽ¯ [DUMMY] Deploying to Google Play Store..."
          echo "APK: ./app-${{ needs.build.outputs.version_tag }}.apk"
          echo "Version: ${{ needs.build.outputs.version_tag }}"
          sleep 2
          echo "âœ… [DUMMY] Play Store deployment completed successfully!"
          
          # Uncomment below when ready for actual deployment:
          # Add your Play Store deployment commands here (e.g., fastlane, play publisher API)

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ¯ **[TEST]** Version **${{ needs.build.outputs.version_tag }}** - Play Store deployment step executed successfully!'
            })
